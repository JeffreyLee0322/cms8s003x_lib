C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/26/2018 01:57:45 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_ITC
OBJECT MODULE PLACED IN .\Objects\cms8s003x_itc.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003x_StdPeriph_Driver\src\cms8s003x_
                    -itc.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003x_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s0
                    -03x_itc.lst) TABS(2) OBJECT(.\Objects\cms8s003x_itc.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_itc.c
   4            * @author  LI WEI
   5            * @version V1.0.3
   6            * @date    04/24/2018
   7            * @brief   This file provides all the ITC firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_itc.h"
  23          #include "cms8s003x_spi.h"
  24          #include "cms8s003x_tim01.h"
  25          #include "cms8s003x_tim2.h"
  26          #include "cms8s003x_gpio.h"
  27          #include "cms8s003x_uart.h"
  28          #include "cms8s003x_epwm.h"
  29          #include "cms8s003x_iic.h"
  30          
  31          /** @addtogroup CMS8S003x_StdPeriph_Driver
  32            * @{
  33            */
  34          
  35          /* Private typedef -----------------------------------------------------------*/
  36          /* Private define ------------------------------------------------------------*/
  37          /* Private macro -------------------------------------------------------------*/
  38          /* Private variables ---------------------------------------------------------*/
  39          uint32_t timer0Count = 0;
  40          uint32_t timer1Count = 0;
  41          
  42          uint16_t readCount_TIM0 = 0, readCount_TIM1 = 0;
  43          uint8_t IIC_SendTimes = 0;
  44          /* Private function prototypes -----------------------------------------------*/
  45          /* Private functions ---------------------------------------------------------*/
  46          
  47          /** @addtogroup ITC_Private_Functions
  48            * @{
  49            */
  50          
  51          
  52          
  53          /**
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/26/2018 01:57:45 PAGE 2   

  54            * @}
  55            */
  56          
  57          /** @addtogroup ITC_Public_Functions
  58            * @{
  59            */
  60          
  61          /**
  62            * @brief  Deinitializes the ITC registers to their default reset value.
  63            * @param  None
  64            * @retval None
  65           */
  66          void ITC_DeInit(void)
  67          {
  68   1      
  69   1      }
  70          
  71          //unsigned int times = 0;   
  72          void SPI_ISR() interrupt 22
  73          {
  74   1        FlagStatus status = 0;
  75   1        ITStatus  itS = 0;
  76   1        if(SPI_GetFlagStatus(Peripheral_SPI_Interrupt)) //SPI总中断指示位  清除具体的中断标志位后 此位自动清除
  77   1        {
  78   2          if(SPI_GetITStatus(SPI_FLAG_SPISIF))        //SPI传输完毕中断标志位 先读SPSR 再度写SPDR后清0
  79   2          {
  80   3             /*if(times<5)
  81   3             {
  82   3               Master_Received[times] = SPI_ReceiveData();
  83   3              
  84   3               if(times < 4)
  85   3                 SPI_SendData(0x40);
  86   3             }
  87   3             times++;*/
  88   3          }
  89   2          else if(SPI_GetITStatus(SPI_FLAG_WCOL))   //SPI 写冲突中断标志位 先读SPSR 再读写SPDR后清0
  90   2          {
  91   3      
  92   3          }
  93   2          else if(SPI_GetITStatus(SPI_FLAG_MODF))   //SPI模式错误中断标志 先读SPSR 再读写SPCR后清0
  94   2          {
  95   3          }
  96   2        }
  97   1      }
  98          
  99          
 100          void timer0_int (void) interrupt 1
 101          {
 102   1        //这里不需要判断中断标志位，且中断标志位硬件自动清零
 103   1        uint32_t counter = 0;
 104   1        readCount_TIM0 = TIM0_GetCounter();
 105   1        timer0Count++;
 106   1        if(timer0Count > 100) timer0Count = 0;
 107   1        if(timer0Count%2) GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_5, 1);
 108   1        else GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_5, 0);
 109   1        //counter = TIM0_GetCounter();
 110   1      }
 111          
 112          void timer1_int (void) interrupt 3
 113          {
 114   1        P1_5 =~ P1_5;
 115   1        //TH1 = (uint8_t)((8192 - (uint16_t)(1000000.0 / 9600 / 0.25))>>5);
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/26/2018 01:57:45 PAGE 3   

 116   1        //TL1 = (uint8_t)((8192 - (uint16_t)(1000000.0 / 9600 / 0.25))&0xFF);
 117   1        /*readCount_TIM1 = TIM1_GetCounter();
 118   1        timer1Count++;
 119   1        if(timer1Count > 100) timer1Count = 0;
 120   1        if(timer1Count%2) GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_6, 1);
 121   1        else GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_6, 0);*/
 122   1      }
 123          
 124          void timer2_int (void) interrupt 5
 125          {
 126   1        //P1_5 =~ P1_5;
 127   1        if(TIM2_GetITStatus(TIM2_Overflow_Flag))
 128   1        {
 129   2            TIM2_ClearITPendingBit(TIM2_Overflow_Flag);
 130   2        }
 131   1        
 132   1        if(TIM2_GetITStatus(TIM2_Reload_Flag))
 133   1        {
 134   2            TIM2_ClearITPendingBit(TIM2_Reload_Flag);
 135   2        }
 136   1        
 137   1        if(TIM2_GetITStatus(TIM2_OOC3_Flag))
 138   1        {
 139   2            TIM2_ClearITPendingBit(TIM2_OOC3_Flag);
 140   2        }
 141   1        
 142   1        if(TIM2_GetITStatus(TIM2_OOC2_Flag))
 143   1        {
 144   2            TIM2_ClearITPendingBit(TIM2_OOC2_Flag);
 145   2        }
 146   1        
 147   1        if(TIM2_GetITStatus(TIM2_OOC1_Flag))
 148   1        {
 149   2            TIM2_ClearITPendingBit(TIM2_OOC1_Flag);
 150   2        }
 151   1        
 152   1        if(TIM2_GetITStatus(TIM2_OOC0_Flag))
 153   1        {
 154   2            TIM2_ClearITPendingBit(TIM2_OOC0_Flag);
 155   2        }
 156   1      }
 157          
 158          void timer3_int (void) interrupt 15
 159          {
 160   1      
 161   1      }
 162          
 163          void timer4_int (void) interrupt 16
 164          {
 165   1      
 166   1      }
 167          
 168          void uart0_int (void) interrupt 4
 169          {
 170   1        
 171   1        if(UART_GetITStatus(UART0, Send_IT_Status))
 172   1        {
 173   2            UART_ClearITPendingBit(UART0, Send_IT_Status);
 174   2        }
 175   1        
 176   1        if(UART_GetITStatus(UART0, Receive_IT_Status))
 177   1        {
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/26/2018 01:57:45 PAGE 4   

 178   2            UART_ClearITPendingBit(UART0, Send_IT_Status);
 179   2        }
 180   1      }
 181          
 182          void uart1_int (void) interrupt 6
 183          {
 184   1        if(UART_GetITStatus(UART1, Send_IT_Status))
 185   1        {
 186   2            UART_ClearITPendingBit(UART1, Send_IT_Status);
 187   2        }
 188   1        
 189   1        if(UART_GetITStatus(UART1, Receive_IT_Status))
 190   1        {
 191   2            UART_ClearITPendingBit(UART1, Send_IT_Status);
 192   2        }
 193   1      }
 194          
 195          void pwm_int (void) interrupt 18
 196          {
 197   1        if(EPWM_GetPeriodITStatus(EPWM0_PeriodIT))
 198   1        {
 199   2            EPWM_ClearPeriodITStatus(EPWM0_PeriodIT);
 200   2        }
 201   1        
 202   1        if(EPWM_GetPeriodITStatus(EPWM1_PeriodIT))
 203   1        {
 204   2            EPWM_ClearPeriodITStatus(EPWM1_PeriodIT);
 205   2        }
 206   1        
 207   1        if(EPWM_GetPeriodITStatus(EPWM2_PeriodIT))
 208   1        {
 209   2            EPWM_ClearPeriodITStatus(EPWM2_PeriodIT);
 210   2        }
 211   1        
 212   1        if(EPWM_GetZeroITStatus(EPWM3_ZeroIT))
 213   1        {
 214   2            EPWM_ClearZeroITStatus(EPWM3_ZeroIT);
 215   2        }
 216   1        
 217   1        if(EPWM_GetZeroITStatus(EPWM4_ZeroIT))
 218   1        {
 219   2            EPWM_ClearZeroITStatus(EPWM4_ZeroIT);
 220   2        }
 221   1        
 222   1        if(EPWM_GetZeroITStatus(EPWM5_ZeroIT))
 223   1        {
 224   2            EPWM_ClearZeroITStatus(EPWM5_ZeroIT);
 225   2        }
 226   1      }
 227          
 228          void iic_int()  interrupt 21
 229          {
 230   1         if(IIC_GetITStatus(IIC_IT))  //Whether generate iic interrupt or not  
 231   1         {
 232   2            if(_SET == IIC_GetFlagStatus(IIC_Flag_Master_IT))
 233   2            {
 234   3              IIC_SendTimes++;
 235   3              
 236   3              if(IIC_SendTimes < 5)
 237   3              {
 238   4                IIC_MasterSendData(0x55);
 239   4              }
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/26/2018 01:57:45 PAGE 5   

 240   3              IIC_Stop();
 241   3            }
 242   2         }
 243   1      }
 244          
 245          /**
 246            * @}
 247            */
 248          
 249          /**
 250            * @}
 251            */
 252          
 253          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    822    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
