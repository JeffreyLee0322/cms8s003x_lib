C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     05/31/2018 00:15:12 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_ITC
OBJECT MODULE PLACED IN .\Objects\cms8s003x_itc.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003x_StdPeriph_Driver\src\cms8s003x_
                    -itc.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003x_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s0
                    -03x_itc.lst) TABS(2) OBJECT(.\Objects\cms8s003x_itc.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_itc.c
   4            * @author  LI WEI
   5            * @version V1.0.3
   6            * @date    04/24/2018
   7            * @brief   This file provides all the ITC firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_itc.h"
  23          #include "cms8s003x_spi.h"
  24          #include "cms8s003x_tim01.h"
  25          #include "cms8s003x_tim2.h"
  26          #include "cms8s003x_gpio.h"
  27          #include "cms8s003x_uart.h"
  28          
  29          /** @addtogroup CMS8S003x_StdPeriph_Driver
  30            * @{
  31            */
  32          
  33          /* Private typedef -----------------------------------------------------------*/
  34          /* Private define ------------------------------------------------------------*/
  35          /* Private macro -------------------------------------------------------------*/
  36          /* Private variables ---------------------------------------------------------*/
  37          uint32_t timer0Count = 0;
  38          uint32_t timer1Count = 0;
  39          
  40          uint16_t readCount_TIM0 = 0, readCount_TIM1 = 0;
  41          /* Private function prototypes -----------------------------------------------*/
  42          /* Private functions ---------------------------------------------------------*/
  43          
  44          /** @addtogroup ITC_Private_Functions
  45            * @{
  46            */
  47          
  48          
  49          
  50          /**
  51            * @}
  52            */
  53          
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     05/31/2018 00:15:12 PAGE 2   

  54          /** @addtogroup ITC_Public_Functions
  55            * @{
  56            */
  57          
  58          /**
  59            * @brief  Deinitializes the ITC registers to their default reset value.
  60            * @param  None
  61            * @retval None
  62           */
  63          void ITC_DeInit(void)
  64          {
  65   1      
  66   1      }
  67          
  68          //unsigned int times = 0;   
  69          void SPI_ISR() interrupt 22
  70          {
  71   1        FlagStatus status = 0;
  72   1        ITStatus  itS = 0;
  73   1        if(SPI_GetFlagStatus(Peripheral_SPI_Interrupt)) //SPI总中断指示位  清除具体的中断标志位后 此位自动清除
  74   1        {
  75   2          if(SPI_GetITStatus(SPI_FLAG_SPISIF))        //SPI传输完毕中断标志位 先读SPSR 再度写SPDR后清0
  76   2          {
  77   3             /*if(times<5)
  78   3             {
  79   3               Master_Received[times] = SPI_ReceiveData();
  80   3              
  81   3               if(times < 4)
  82   3                 SPI_SendData(0x40);
  83   3             }
  84   3             times++;*/
  85   3          }
  86   2          else if(SPI_GetITStatus(SPI_FLAG_WCOL))   //SPI 写冲突中断标志位 先读SPSR 再读写SPDR后清0
  87   2          {
  88   3      
  89   3          }
  90   2          else if(SPI_GetITStatus(SPI_FLAG_MODF))   //SPI模式错误中断标志 先读SPSR 再读写SPCR后清0
  91   2          {
  92   3          }
  93   2        }
  94   1      }
  95          
  96          
  97          void timer0_int (void) interrupt 1
  98          {
  99   1        //这里不需要判断中断标志位，且中断标志位硬件自动清零
 100   1        uint32_t counter = 0;
 101   1        readCount_TIM0 = TIM0_GetCounter();
 102   1        timer0Count++;
 103   1        if(timer0Count > 100) timer0Count = 0;
 104   1        if(timer0Count%2) GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_5, 1);
 105   1        else GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_5, 0);
 106   1        //counter = TIM0_GetCounter();
 107   1      }
 108          
 109          void timer1_int (void) interrupt 3
 110          {
 111   1        //TH1 = (uint8_t)((8192 - (uint16_t)(1000000.0 / 9600 / 0.25))>>5);
 112   1        //TL1 = (uint8_t)((8192 - (uint16_t)(1000000.0 / 9600 / 0.25))&0xFF);
 113   1        readCount_TIM1 = TIM1_GetCounter();
 114   1        timer1Count++;
 115   1        if(timer1Count > 100) timer1Count = 0;
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     05/31/2018 00:15:12 PAGE 3   

 116   1        if(timer1Count%2) GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_6, 1);
 117   1        else GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_6, 0);
 118   1      }
 119          
 120          void timer2_int (void) interrupt 5
 121          {
 122   1        P1_5 =~ P1_5;
 123   1        if(TIM2_GetITStatus(TIM2_Overflow_Flag))
 124   1        {
 125   2            TIM2_ClearITPendingBit(TIM2_Overflow_Flag);
 126   2        }
 127   1        
 128   1        if(TIM2_GetITStatus(TIM2_Reload_Flag))
 129   1        {
 130   2            TIM2_ClearITPendingBit(TIM2_Reload_Flag);
 131   2        }
 132   1        
 133   1        if(TIM2_GetITStatus(TIM2_OOC3_Flag))
 134   1        {
 135   2            TIM2_ClearITPendingBit(TIM2_OOC3_Flag);
 136   2        }
 137   1        
 138   1        if(TIM2_GetITStatus(TIM2_OOC2_Flag))
 139   1        {
 140   2            TIM2_ClearITPendingBit(TIM2_OOC2_Flag);
 141   2        }
 142   1        
 143   1        if(TIM2_GetITStatus(TIM2_OOC1_Flag))
 144   1        {
 145   2            TIM2_ClearITPendingBit(TIM2_OOC1_Flag);
 146   2        }
 147   1        
 148   1        if(TIM2_GetITStatus(TIM2_OOC0_Flag))
 149   1        {
 150   2            TIM2_ClearITPendingBit(TIM2_OOC0_Flag);
 151   2        }
 152   1      }
 153          
 154          void timer3_int (void) interrupt 15
 155          {
 156   1      
 157   1      }
 158          
 159          void timer4_int (void) interrupt 16
 160          {
 161   1      
 162   1      }
 163          
 164          void uart0_int (void) interrupt 4
 165          {
 166   1        if(UART_GetITStatus(UART0, Send_IT_Status))
 167   1        {
 168   2            UART_ClearITPendingBit(UART0, Send_IT_Status);
 169   2        }
 170   1        
 171   1        if(UART_GetITStatus(UART0, Receive_IT_Status))
 172   1        {
 173   2            UART_ClearITPendingBit(UART0, Send_IT_Status);
 174   2        }
 175   1      }
 176          
 177          void uart1_int (void) interrupt 6
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     05/31/2018 00:15:12 PAGE 4   

 178          {
 179   1        if(UART_GetITStatus(UART1, Send_IT_Status))
 180   1        {
 181   2            UART_ClearITPendingBit(UART1, Send_IT_Status);
 182   2        }
 183   1        
 184   1        if(UART_GetITStatus(UART1, Receive_IT_Status))
 185   1        {
 186   2            UART_ClearITPendingBit(UART1, Send_IT_Status);
 187   2        }
 188   1      }
 189          
 190          
 191          /**
 192            * @}
 193            */
 194          
 195          /**
 196            * @}
 197            */
 198          
 199          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    726    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
