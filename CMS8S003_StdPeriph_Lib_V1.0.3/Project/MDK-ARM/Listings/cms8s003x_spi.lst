C51 COMPILER V9.56.0.0   CMS8S003X_SPI                                                     05/18/2018 18:04:00 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE CMS8S003X_SPI
OBJECT MODULE PLACED IN .\Objects\cms8s003x_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003x_StdPeriph_Driver\src\cms8s003x_spi.c OMF2 OPTI
                    -MIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003x_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s003x_spi.lst) TA
                    -BS(2) OBJECT(.\Objects\cms8s003x_spi.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_spi.c
   4            * @author  LI WEI
   5            * @version V1.0.0
   6            * @date    04/26/2018
   7            * @brief   This file provides all the SPI firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_spi.h"
  23          #include <CMS\CMS51F003.H>
  24          #include "cms8s003x_conf.h"
  25          
  26          /** @addtogroup CMS8S003x_StdPeriph_Driver
  27            * @{
  28            */
  29          
  30          /* Private typedef -----------------------------------------------------------*/
  31          /* Private define ------------------------------------------------------------*/
  32          /* Private macro -------------------------------------------------------------*/
  33          /* Private variables ---------------------------------------------------------*/
  34          /* Private function prototypes -----------------------------------------------*/
  35          /* Private functions ---------------------------------------------------------*/
  36          
  37          /** @addtogroup SPI_Public_Functions
  38            * @{
  39            */
  40          
  41          /**
  42            * @brief  Deinitializes the SPI peripheral registers to their default reset values.
  43            * @param  None
  44            * @retval None
  45            */
  46          void SPI_DeInit(void)
  47          {
  48   1        SPI0_SPCR    = SPI_SPCR_RESET_VALUE;
  49   1        SPI0_SPCR    = SPI_SSCR_RESET_VALUE;
  50   1      }
  51          
  52          /**
  53            * @brief  Initializes the SPI according to the specified parameters.
C51 COMPILER V9.56.0.0   CMS8S003X_SPI                                                     05/18/2018 18:04:00 PAGE 2   

  54            * @param  SPI_InitDef:
  55            *         SPI_BaudRatePrescaler : This parameter can be any of the
  56            *         @ref SPI_BaudRatePrescaler_TypeDef enumeration.
  57            *         SPI_Mode : This parameter can be any of the  @ref SPI_Mode_TypeDef
  58            *         enumeration.
  59            *         SPI_CPOL : This parameter can be any of the @ref SPI_CPOL_TypeDef
  60            *         enumeration.
  61            *         SPI_CPHA : This parameter can be any of the @ref SPI_CPHA_TypeDef
  62            *         enumeration.
  63            * @retval None
  64            */
  65          void SPI_Init(SPI_Init_TypeDef* SPI_InitDef)
  66          {
  67   1        /* Check structure elements */
  68   1        assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitDef->SPI_Frequency));
  69   1        assert_param(IS_SPI_MODE(SPI_InitDef->SPI_Mode));
  70   1        assert_param(IS_SPI_POLARITY(SPI_InitDef->SPI_CPOL));
  71   1        assert_param(IS_SPI_PHASE(SPI_InitDef->SPI_CPHA));
  72   1      
  73   1        /* Frame Format, BaudRate, Clock Polarity ,Mode, CPOL and CPHA configuration */
  74   1        SPI0_SPCR = (SPI_InitDef->SPI_Mode) | (SPI_InitDef->SPI_CPOL) | (SPI_InitDef->SPI_CPHA) | (SPI_InitDef->S
             -PI_Frequency);
  75   1      }
  76          
  77          /**
  78            * @brief  Enables or disables the SPI peripheral.
  79            * @param  NewState New state of the SPI peripheral.
  80            *         This parameter can be: ENABLE or DISABLE
  81            * @retval None
  82            */
  83          void SPI_Cmd(FunctionalState NewState)
  84          {
  85   1        /* Check function parameters */
  86   1        assert_param(IS_FUNCTIONAL_STATE(NewState));
  87   1      
  88   1        if (NewState != _DISABLE)
  89   1        {
  90   2          SPI0_SPCR |= SPEN_ENABLE_BIT; /* Enable the SPI peripheral*/
  91   2        }
  92   1        else
  93   1        {
  94   2          SPI0_SPCR &= (uint8_t)(~SPEN_ENABLE_BIT); /* Disable the SPI peripheral*/
  95   2        }
  96   1      }
  97          
  98          /**
  99            * @brief  Enables or disables the specified interrupts.
 100            * @param  Priority Specifies the SPI interrupts priority.
 101            * @param  NewState: The new state of the specified SPI interrupts.
 102            *         This parameter can be: ENABLE or DISABLE.
 103            * @retval None
 104            */
 105          void SPI_ITConfig(InterruptPriority Priority, FunctionalState NewState)
 106          {
 107   1        /* Check function parameters */
 108   1        assert_param(IS_SPI_PRIORITY(Priority));
 109   1        assert_param(IS_FUNCTIONAL_STATE(NewState));
 110   1        
 111   1        /* Set the SPI priority*/
 112   1        EIP2 |= Priority;
 113   1      
 114   1        /* Set the SPI IT mask Register */
C51 COMPILER V9.56.0.0   CMS8S003X_SPI                                                     05/18/2018 18:04:00 PAGE 3   

 115   1        if (NewState != _DISABLE)
 116   1        {
 117   2          EIE2 |= SPIIE_ENABLE_BIT; /* Enable the SPI IT */
 118   2        }
 119   1        else
 120   1        {
 121   2          EIE2 &= (uint8_t)(~SPIIE_ENABLE_BIT); /* Disable the SPI IT */
 122   2        }
 123   1      }
 124          
 125          
 126          /**
 127            * @brief  Transmits a Data through the SPI peripheral.
 128            * @param  SPIx : where x is 0 to select the specified SPI peripheral.
 129            * @param  Data : Byte to be transmitted.
 130            * @retval None
 131            */
 132          void SPI_SendData(uint8_t Data)
 133          {
 134   1        //SPIx->SPDR = Data; /* Write in the SPDR register the data to be sent*/
 135   1        SPI0_SPDR = Data; /* Write in the SPDR register the data to be sent*/
 136   1      }
 137          
 138          /**
 139            * @brief  Returns the most recent received data by the SPI peripheral.
 140            * @param  SPIx : where x is 0 to select the specified SPI peripheral.
 141            * @retval The value of the received data.
 142            */
 143          uint8_t SPI_ReceiveData(void)
 144          {
 145   1        return ((uint8_t)SPI0_SPDR); /* Return the data in the SPDR register*/
 146   1      }
 147          
 148          
 149          /**
 150            * @brief  Configures internally by software the NSS pin.
 151            * @param  SPIx : where x is 0 to select the specified SPI peripheral.
 152            * @param  Ss0x : where x is 0 to 7.
 153            * @param  NewState Indicates the new state of the SPI Software slave management.
 154            *         This parameter can be: ENABLE or DISABLE.
 155            * @retval None
 156            */
 157          void SPI_NSSInternalSoftwareCmd(SPI_SSCR_TypeDef Ss0x, FunctionalState NewState)
 158          {
 159   1        /* Check function parameters */
 160   1        assert_param(IS_FUNCTIONAL_STATE(NewState));
 161   1        
 162   1        /* Set SSCR Register */
 163   1        SPI0_SSCR = Ss0x;
 164   1         
 165   1        ///* Set SPI Master Mode SSO Output Control bit*/
 166   1        if (NewState != _DISABLE)
 167   1        {
 168   2          SPI0_SPSR |= SPSR_SSCEN_ENABLE_BIT;    /* Set NSS pin internally by software*/
 169   2        }
 170   1        else
 171   1        {
 172   2          SPI0_SPSR &= (uint8_t)(~SPSR_SSCEN_ENABLE_BIT); /* Reset NSS pin internally by software*/
 173   2        }
 174   1      }
 175          
 176          /**
C51 COMPILER V9.56.0.0   CMS8S003X_SPI                                                     05/18/2018 18:04:00 PAGE 4   

 177            * @brief  Checks whether the specified SPI flag is set or not.
 178            * @param  SPIx : where x is 0 to select the specified SPI peripheral.
 179            * @param  SPI_FLAG : Specifies the flag to check.
 180            * @retval FlagStatus : Indicates the state of SPI_FLAG.
 181            *         This parameter can be any of the @ref PeripheralInterruptFlags enumeration.
 182            */
 183          FlagStatus SPI_GetFlagStatus(PeripheralInterruptFlags SPI_FLAG)
 184          {
 185   1        FlagStatus status = _RESET;
 186   1        /* Check parameters */
 187   1        assert_param(IS_SPI_FLAG(SPI_FLAG));
 188   1      
 189   1        /* Check the status of the specified SPI flag */
 190   1        if ((EIF2 & (uint8_t)SPI_FLAG) != (uint8_t)_RESET)
 191   1        {
 192   2          status = _SET; /* SPI_FLAG is set */
 193   2        }
 194   1        else
 195   1        {
 196   2          status = _RESET; /* SPI_FLAG is reset*/
 197   2        }
 198   1        return status;
 199   1      }
 200          
 201          
 202          /**
 203            * @brief  Checks whether the specified interrupt has occurred or not.
 204            * @param  SPIx : where x is 0 to select the specified SPI peripheral.
 205            * @param  SPI_FLAG: Specifies the SPI interrupt pending bit to check.
 206            *         This parameter can be one of the following values:
 207            *           SPI_FLAG_SPISIF
 208                  SPI_FLAG_WCOL
 209                  SPI_FLAG_MODF
 210            * @retval ITStatus : Indicates the state of the SPI_FLAG.
 211            *         This parameter can be any of the @ref ITStatus enumeration.
 212            */
 213          ITStatus SPI_GetITStatus(SPI_IT_TypeDef SPI_FLAG)
 214          {
 215   1        ITStatus status = _RESET;
 216   1        /* Check parameters */
 217   1        assert_param(IS_SPI_FLAG(SPI_FLAG));
 218   1        
 219   1        /* Check the status of the specified SPI flag */
 220   1        if ((SPI0_SPSR & (uint8_t)SPI_FLAG) != (uint8_t)_RESET)
 221   1        {
 222   2          status = _SET; /* SPI_FLAG is set */
 223   2        }
 224   1        else
 225   1        {
 226   2          status = _RESET; /* SPI_FLAG is reset*/
 227   2        }
 228   1      
 229   1        /* Return the SPI_FLAG status */
 230   1        return status;
 231   1      }
 232          
 233          /**
 234            * @brief  Clears the interrupt pending bits.
 235            * @note   - OVR (OverRun Error) interrupt pending bit is cleared by software sequence:
 236            *         a read operation to SPI_DR register (SPI_ReceiveData()) followed by
 237            *         a read operation to SPI_SR register (SPI_GetITStatus()).
 238            *         - MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
C51 COMPILER V9.56.0.0   CMS8S003X_SPI                                                     05/18/2018 18:04:00 PAGE 5   

 239            *         a read/write operation to SPI_SR register (SPI_GetITStatus()) followed by
 240            *         a write operation to SPI_CR register (SPI_Cmd() to enable the SPI).
 241            * @retval None
 242            */
 243          void SPI_ClearITPendingBit(SPI_IT_TypeDef SPI_IT)
 244          {
 245   1        //NOT USE!!!
 246   1      }
*** WARNING C280 IN LINE 243 OF ..\..\Libraries\CMS8S003x_StdPeriph_Driver\src\cms8s003x_spi.c: 'SPI_IT': unreferenced l
             -ocal variable
 247          
 248          /**
 249            * @}
 250            */
 251          
 252          /**
 253            * @}
 254            */
 255          
 256          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    114    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
