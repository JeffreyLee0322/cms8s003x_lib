C51 COMPILER V9.56.0.0   MAIN                                                              05/30/2018 17:19:55 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\main.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S
                    -003x_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_spi.c
   4            * @author  LI WEI
   5            * @version V1.0.0
   6            * @date    04/26/2018
   7            * @brief   This file provides MAIN entrance.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          #include <CMS\CMS8S003.H>
  22          #include "cms8s003x_spi.h"
  23          #include "cms8s003x_syscon.h"
  24          #include "cms8s003x_gpio.h"
  25          #include "cms8s003x_clk.h"
  26          #include "cms8s003x_tim01.h"
  27          #include "cms8s003x_tim2.h"
  28          #include "cms8s003x_uart.h"
  29          
  30          //#define TEST_SPI
  31          //#define TEST_GPIO
  32          #define TEST_TIMER01
  33          //#define TEST_TIMER2
  34          //#define TEST_TIMER34
  35          //#define TEST_UART
  36          
  37          #ifdef TEST_SPI
              void SPIMaster_Config(void)
              {
                SPI_Init_TypeDef SPI_InitStructure;                             // 结构定义
                SPI_InitStructure.SPI_Mode      = SPI_Mode_Master;              //SPI选择主机模式
                SPI_InitStructure.SPI_CPOL      = SPI_CPOL_LOW;                 //SPI空闲模式选择高电平
                SPI_InitStructure.SPI_CPHA      = SPI_CPHA_1Edge;               //SPI时钟极性选择0 
                SPI_InitStructure.SPI_Frequency = SPI_BaudRatePrescaler_32;     //SPI的时钟选择
              
                SPI_Init(&SPI_InitStructure);
                //SPI_NSSInternalSoftwareCmd(SPI_SSCR_SSO0, _ENABLE);
                
                SPI_ITConfig(SPI_Interrupt_Priority_LOW, _ENABLE);
                SPI_Cmd(_ENABLE);
                MCU_ITConfig(_ENABLE);
              }
              
              void SPI_IO_Config(void)
C51 COMPILER V9.56.0.0   MAIN                                                              05/30/2018 17:19:55 PAGE 2   

              {
                GPIO_Init_TypeDef GPIO_InitStructure;
                
                SYS_GPIO_Alternate_Config(GPIO_NUM_P15, P15_ALT_SCLK);
                SYS_GPIO_Alternate_Config(GPIO_NUM_P16, P16_ALT_MOSI);
                SYS_GPIO_Alternate_Config(GPIO_NUM_P17, P17_ALT_MISO);
                
                GPIO_InitStructure.Mode       = GPIO_ALT;
                GPIO_InitStructure.Direction  = GPIO_OUTPUT;
                GPIO_InitStructure.Analog     = GPIO_Digital_Sel;
                GPIO_InitStructure.OType      = GPIO_Pushpull_Sel;
                GPIO_InitStructure.Up         = GPIO_Up_Disable;
                GPIO_InitStructure.Down       = GPIO_Down_Disable;
                GPIO_InitStructure.Driver     = GPIO_Driver_Weak;
                GPIO_InitStructure.Slope      = GPIO_Slope_Slow;
                GPIO_InitStructure.Pin        = GPIO_PIN_5;
                GPIO_Init(GPIO_PORT_1, &GPIO_InitStructure);
                
                GPIO_InitStructure.Mode       = GPIO_ALT;
                GPIO_InitStructure.Direction  = GPIO_INPUT;
                GPIO_InitStructure.Analog     = GPIO_Digital_Sel;
                GPIO_InitStructure.Up         = GPIO_Up_Enable;
                GPIO_InitStructure.Pin        = GPIO_PIN_7;
                GPIO_Init(GPIO_PORT_1, &GPIO_InitStructure);
              }
              #endif
  81          
  82          //#ifdef TEST_GPIO
  83          void test_gpio_init(void)
  84          {
  85   1        GPIO_Init_TypeDef GPIO_InitStructure;
  86   1        GPIO_InitStructure.Mode       = GPIO_PIN;
  87   1        GPIO_InitStructure.Direction  = GPIO_OUTPUT;
  88   1        GPIO_InitStructure.Analog     = GPIO_Digital_Sel;
  89   1        GPIO_InitStructure.OType      = GPIO_Pushpull_Sel;
  90   1        GPIO_InitStructure.Up         = GPIO_Up_Enable;
  91   1        GPIO_InitStructure.Down       = GPIO_Down_Enable;
  92   1        GPIO_InitStructure.Driver     = GPIO_Driver_Weak;
  93   1        GPIO_InitStructure.Slope      = GPIO_Slope_Slow;
  94   1        GPIO_InitStructure.Pin        = GPIO_PIN_5;
  95   1        GPIO_Init(GPIO_PORT_1, &GPIO_InitStructure);
  96   1        
  97   1        GPIO_InitStructure.Pin        = GPIO_PIN_6;
  98   1        GPIO_Init(GPIO_PORT_1, &GPIO_InitStructure);
  99   1      }
 100          //#endif
 101          
 102          #ifdef TEST_TIMER01
 103          void test_sysClock_init(void)
 104          {
 105   1        //CLK_SYSCLKDivConfig(8);//sys clk is 8/4=2MHz
 106   1      }
 107          
 108          void test_timer01_init(void)
 109          {
 110   1        TIM01_Init_TypeDef TIM0_InitStructure, TIM1_InitStructure;
 111   1        
 112   1        TIM0_InitStructure.Timer_Function     = TIM01_Function_Timer;
 113   1        TIM0_InitStructure.Timer_Mode         = TIM01_Mode2_8Bit_AutoLoad_Timer_Counter;
 114   1        TIM0_InitStructure.Timer_Clock        = TIM01_SYSCLK_Prescaler_4;
 115   1        TIM0_InitStructure.Timer_InitValue    = 100;
 116   1        //TIM0_Init(&TIM0_InitStructure);
C51 COMPILER V9.56.0.0   MAIN                                                              05/30/2018 17:19:55 PAGE 3   

 117   1        
 118   1        TIM1_InitStructure.Timer_Function     = TIM01_Function_Timer;
 119   1        //TIM1_InitStructure.Timer_Mode         = TIM01_Mode0_13Bit_Timer_Counter;
 120   1        //TIM1_InitStructure.Timer_Clock        = TIM01_SYSCLK_Prescaler_4;//timer frequency is 16/4 MHz = 4MHz --> 
             -T=0.25us
 121   1        //TIM1_InitStructure.Timer_InitValue    = 8192 - (uint16_t)(1000000.0 / 9600 / 0.25);
 122   1        TIM1_InitStructure.Timer_Mode         = TIM01_Mode2_8Bit_AutoLoad_Timer_Counter;
 123   1        TIM1_InitStructure.Timer_Clock        = TIM01_SYSCLK_Prescaler_12;//timer frequency is 16/12 MHz --> T=0.75u
             -s
 124   1        TIM1_InitStructure.Timer_InitValue    = 256 - (uint8_t)(1000000.0 / 9600 / 0.75);
 125   1        
 126   1        TIM1_Init(&TIM1_InitStructure);
 127   1        
 128   1        //TIM0_ITConfig(TIM01_HIGH_Priority, _ENABLE);
 129   1        TIM1_ITConfig(TIM01_LOW_Priority, _ENABLE);
 130   1        
 131   1        //TIM0_Cmd(_ENABLE);
 132   1        TIM1_Cmd(_ENABLE);
 133   1        
 134   1        MCU_ITConfig(_ENABLE);
 135   1      }
 136          #endif
 137          
 138          #ifdef TEST_TIMER2
              void test_timer2_init(void)
              {
                GPIO_Init_TypeDef GPIO_InitStructure;
                TIM2_Init_TypeDef TIM2_InitStructure;
                TIM2_OC_Init_TypeDef TIM2_OC_InitStructure;
                TIM2_IC_Init_TypeDef TIM2_IC_InitStructure;
                
                TIM2_InitStructure.Clock_Source     = TIM2_SysClock_Prescaler;     //Timer2的时钟输入选择：系统时钟的分频
                TIM2_InitStructure.Clock_Prescaler  = TIM2_SysClock_Prescaler_12;  //Timer2时钟预分频选择
                TIM2_InitStructure.Reload_Mode      = TIM2_Overflow_Auto_Reload;   //Timer2加载模式选择
                TIM2_InitStructure.Init_Value       = 0;                            //Timer2 数据寄存器初始值
                
                TIM2_DeInit();
                TIM2_TimeBaseInit(&TIM2_InitStructure);
                
                //Output Compare IO setup
                SYS_GPIO_Alternate_Config(GPIO_NUM_P24, P24_ALT_CC1);
                
                GPIO_InitStructure.Mode       = GPIO_ALT;
                GPIO_InitStructure.Pin        = GPIO_PIN_4;
                GPIO_InitStructure.Direction  = GPIO_OUTPUT;
                GPIO_InitStructure.Analog     = GPIO_Digital_Sel;
                GPIO_InitStructure.OType      = GPIO_Pushpull_Sel;
                GPIO_InitStructure.Up         = GPIO_Up_Enable;
                GPIO_InitStructure.Down       = GPIO_Down_Enable;
                GPIO_InitStructure.Driver     = GPIO_Driver_Weak;
                GPIO_InitStructure.Slope      = GPIO_Slope_Slow;
                GPIO_Init(GPIO_PORT_2, &GPIO_InitStructure);
                
                //Output Compare Register setup
                /*TIM2_OC_InitStructure.OC_Channel      = TIM2_OC_Channel_1;
                TIM2_OC_InitStructure.OC_INT_Edge     = TIM2_OC_Falling_Edge_INT;
                TIM2_OC_InitStructure.OC_Mode         = TIM2_OC_Mode_0;
                TIM2_OC_InitStructure.OC_CMLx         = TIM2_OC_CML1_Enable;
                TIM2_OC_InitStructure.OC_Init_Value   = 0x8000;
                
                TIM2_OCInit(&TIM2_OC_InitStructure);*/
              
C51 COMPILER V9.56.0.0   MAIN                                                              05/30/2018 17:19:55 PAGE 4   

                TIM2_IC_InitStructure.IC_Channel      = TIM2_IC_Channel_0;
                TIM2_IC_InitStructure.IC_INT_Edge     = TIM2_IC_Falling_Edge_INT;
                TIM2_IC_InitStructure.IC_Select       = TIM2_IC_Channel0_IC0;
                
                TIM2_ICInit(&TIM2_IC_InitStructure);
                
                //Tim2 timer/oc/ic setup
                //TIM2_ITConfig(TIM2_Overflow_IT_Enable | TIM2_All_IT_Enable, TIM2_LOW_Priority, _ENABLE);
                TIM2_ITConfig(TIM2_Overflow_IT_Enable | TIM2_OOC1_IT_Enable | TIM2_All_IT_Enable, TIM2_HIGH_Priority, _EN
             -ABLE);
                MCU_ITConfig(_ENABLE);
              }
              #endif
 189          
 190          #ifdef TEST_UART
              void test_uart_init()
              {
                UART_Init_TypeDef UART_InitStructure;
                UART_InitStructure.Mode               = Mode_8Bit_Unsettled_Freq; 
                UART_InitStructure.MutiDevices        = _DISABLE;
                UART_InitStructure.IsReceive          = _ENABLE;
                UART_InitStructure.SendData9Bit       = Data_9Bit_Is1;
                UART_InitStructure.ReceiveData9Bit    = Data_9Bit_Is1;
                UART_InitStructure.UartBaudrateDouble = Baudrate_Normal;
                UART_InitStructure.UartClkSource      = Timer_SysClk_Select;
                UART_InitStructure.UartBaurdrate      = Baudrate_9600;
                
                UART_Init(UART0, &UART_InitStructure);
              }
              
              void test_uart1_init()
              {
              
              }
              #endif
 211          
 212          void Delay_Time(int time)
 213          {
 214   1        while(time> 0)
 215   1        {
 216   2          time--;
 217   2        }
 218   1      }
 219          
 220          void main(void)
 221          {
 222   1      #ifdef TEST_SPI
                SPI_IO_Config();
                SPIMaster_Config();
                while(1)
                {
                  SPI_SendData(0x42);
                  Delay_Time(100);
                }
              #endif
 231   1      
 232   1      #ifdef TEST_GPIO
                  test_gpio_init();
                  //GPIO_Write(GPIO_PORT_1, 0x20);
              #endif
 236   1      
 237   1      #ifdef TEST_TIMER01
C51 COMPILER V9.56.0.0   MAIN                                                              05/30/2018 17:19:55 PAGE 5   

 238   1        test_sysClock_init();
 239   1        test_gpio_init();
 240   1        GPIO_Write(GPIO_PORT_1, 0);
 241   1        test_timer01_init();
 242   1      #endif
 243   1        
 244   1      #ifdef TEST_TIMER2
                test_gpio_init();
                GPIO_Write(GPIO_PORT_1, 0);
                test_timer2_init();
              #endif
 249   1        
 250   1      #ifdef TEST_UART
                test_uart_init();
              #endif
 253   1      
 254   1        while(1);
 255   1      }
 256          
 257          
 258          
 259          
 260          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    147    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
