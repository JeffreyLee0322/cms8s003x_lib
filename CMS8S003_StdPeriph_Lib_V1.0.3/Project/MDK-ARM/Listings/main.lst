C51 COMPILER V9.59.0.0   MAIN                                                              05/29/2018 01:21:17 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\src\main.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\
                    -Libraries\CMS8S003x_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_spi.c
   4            * @author  LI WEI
   5            * @version V1.0.0
   6            * @date    04/26/2018
   7            * @brief   This file provides MAIN entrance.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          #include <CMS\CMS8S003.H>
  22          #include "cms8s003x_spi.h"
  23          #include "cms8s003x_syscon.h"
  24          #include "cms8s003x_gpio.h"
  25          #include "cms8s003x_clk.h"
  26          #include "cms8s003x_tim01.h"
  27          
  28          
  29          //#define TEST_SPI
  30          //#define TEST_GPIO
  31          //#define TEST_TIMER01
  32          //#define TEST_TIMER2
  33          
  34          #ifdef TEST_SPI
              void SPIMaster_Config(void)
              {
                SPI_Init_TypeDef SPI_InitStructure;                             // 结构定义
                SPI_InitStructure.SPI_Mode      = SPI_Mode_Master;              //SPI选择主机模式
                SPI_InitStructure.SPI_CPOL      = SPI_CPOL_LOW;                 //SPI空闲模式选择高电平
                SPI_InitStructure.SPI_CPHA      = SPI_CPHA_1Edge;               //SPI时钟极性选择0 
                SPI_InitStructure.SPI_Frequency = SPI_BaudRatePrescaler_32;     //SPI的时钟选择
              
                SPI_Init(&SPI_InitStructure);
                //SPI_NSSInternalSoftwareCmd(SPI_SSCR_SSO0, _ENABLE);
                
                SPI_ITConfig(SPI_Interrupt_Priority_LOW, _ENABLE);
                SPI_Cmd(_ENABLE);
                MCU_ITConfig(_ENABLE);
              }
              
              void SPI_IO_Config(void)
              {
                GPIO_Init_TypeDef GPIO_InitStructure;
                
C51 COMPILER V9.59.0.0   MAIN                                                              05/29/2018 01:21:17 PAGE 2   

                SYS_GPIO_Alternate_Config(GPIO_NUM_P15, P15_ALT_SCLK);
                SYS_GPIO_Alternate_Config(GPIO_NUM_P16, P16_ALT_MOSI);
                SYS_GPIO_Alternate_Config(GPIO_NUM_P17, P17_ALT_MISO);
                
                GPIO_InitStructure.Mode       = GPIO_ALT;
                GPIO_InitStructure.Direction  = GPIO_OUTPUT;
                GPIO_InitStructure.Analog     = GPIO_Digital_Sel;
                GPIO_InitStructure.OType      = GPIO_Pushpull_Sel;
                GPIO_InitStructure.Up         = GPIO_Up_Disable;
                GPIO_InitStructure.Down       = GPIO_Down_Disable;
                GPIO_InitStructure.Driver     = GPIO_Driver_Weak;
                GPIO_InitStructure.Slope      = GPIO_Slope_Slow;
                GPIO_InitStructure.Pin        = GPIO_PIN_5;
                GPIO_Init(GPIO_PORT_1, &GPIO_InitStructure);
                
                GPIO_InitStructure.Mode       = GPIO_ALT;
                GPIO_InitStructure.Direction  = GPIO_INPUT;
                GPIO_InitStructure.Analog     = GPIO_Digital_Sel;
                GPIO_InitStructure.Up         = GPIO_Up_Enable;
                GPIO_InitStructure.Pin        = GPIO_PIN_7;
                GPIO_Init(GPIO_PORT_1, &GPIO_InitStructure);
              }
              #endif
  78          
  79          //#ifdef TEST_GPIO
  80          void test_gpio_init(void)
  81          {
  82   1        GPIO_Init_TypeDef GPIO_InitStructure;
  83   1        GPIO_InitStructure.Mode       = GPIO_PIN;
  84   1        GPIO_InitStructure.Direction  = GPIO_OUTPUT;
  85   1        GPIO_InitStructure.Analog     = GPIO_Digital_Sel;
  86   1        GPIO_InitStructure.OType      = GPIO_Pushpull_Sel;
  87   1        GPIO_InitStructure.Up         = GPIO_Up_Enable;
  88   1        GPIO_InitStructure.Down       = GPIO_Down_Enable;
  89   1        GPIO_InitStructure.Driver     = GPIO_Driver_Weak;
  90   1        GPIO_InitStructure.Slope      = GPIO_Slope_Slow;
  91   1        GPIO_InitStructure.Pin        = GPIO_PIN_5;
  92   1        GPIO_Init(GPIO_PORT_1, &GPIO_InitStructure);
  93   1      }
  94          //#endif
  95          
  96          #ifdef TEST_TIMER01
              void test_sysClock_init(void)
              {
                CLK_SYSCLKDivConfig(4);//sys clk is 1MHz
              }
              
              void test_timer01_init(void)
              {
                TIM01_Init_TypeDef TIM0_InitStructure;
                TIM0_InitStructure.Timer_Function     = TIM_Function_Timer;
                TIM0_InitStructure.Timer_Mode         = Mode2_8Bit_AutoLoad_Timer_Counter;
                TIM0_InitStructure.Timer_Clock        = SYSCLK_Prescaler_12;//timer frequency is 1/4 MHz || T = 4us
                TIM0_InitStructure.Timer_InitValue    = 100;//1ms
                TIM0_Init(&TIM0_InitStructure);
                
                TIM0_ITConfig(TIM_HIGH_Priority, _ENABLE);
                MCU_ITConfig(_ENABLE);
                TIM0_Cmd(_ENABLE);
              }
              #endif
 116          
C51 COMPILER V9.59.0.0   MAIN                                                              05/29/2018 01:21:17 PAGE 3   

 117          #ifdef TEST_TIMER2
              void test_timer2_init(void)
              {
                TIM2_Init_TypeDef TIM2_InitStructure;
                TIM2_OC_Init_TypeDef TIM2_OC_InitStructure;
                TIM2_IC_Init_TypeDef TIM2_IC_InitStructure;
                
                TIM2_InitStructure.Clock_Source     = TIM2_SysClock_Prescaler;     //Timer2的时钟输入选择：系统时钟的分频
                TIM2_InitStructure.Clock_Prescaler  = TIM2_SysClock_Prescaler_12;  //Timer2时钟预分频选择
                TIM2_InitStructure.Reload_Mode      = TIM2_Overflow_Auto_Reload;   //Timer2加载模式选择
                TIM2_InitStructure.Init_Value       = 200;                         //Timer2 数据寄存器初始值
                
                TIM2_DeInit();
                TIM2_TimeBaseInit(&TIM2_InitStructure);
                
                TIM2_OC_InitStructure.OC_Channel      = TIM2_OC_Channel_0;
                TIM2_OC_InitStructure.OC_INT_Edge     = TIM2_OC_Falling_Edge_INT;
                TIM2_OC_InitStructure.OC_Mode         = TIM2_OC_Mode_0;
                TIM2_OC_InitStructure.OC_CMLx         = TIM2_OC_CML0_Enable;
                TIM2_OC_InitStructure.OC_Init_Value   = 0x8000;
                
                TIM1_OCInit(&TIM2_OC_InitStructure);
                
                TIM2_IC_InitStructure.IC_Channel      = TIM2_IC_Channel_0;
                TIM2_IC_InitStructure.IC_INT_Edge     = TIM2_IC_Falling_Edge_INT;
                TIM2_IC_InitStructure.IC_Select       = TIM2_IC_Channel0_IC0;
                
                TIM2_ICInit(&TIM2_IC_InitStructure);
                //TIM2_ITConfig(TIM2_Overflow_IT_Enable | TIM2_Reload_IT_Enable | TIM2_All_IT_Enable, TIM2_LOW_Priority, 
             -_ENABLE);
              }
              #endif
 148          
 149          void Delay_Time(int time)
 150          {
 151   1        while(time> 0)
 152   1        {
 153   2          time--;
 154   2        }
 155   1      }
 156          
 157          void main(void)
 158          {
 159   1      #ifdef TEST_SPI
                SPI_IO_Config();
                SPIMaster_Config();
                while(1)
                {
                  SPI_SendData(0x42);
                  Delay_Time(100);
                }
              #endif
 168   1      
 169   1      #ifdef TEST_GPIO
                  test_gpio_init();
                  GPIO_Write(GPIO_PORT_1, 0x20);
              #endif
 173   1      
 174   1      #ifdef TEST_TIMER01
                  //test_sysClock_init();
                  //test_gpio_init();
                  test_timer01_init();
C51 COMPILER V9.59.0.0   MAIN                                                              05/29/2018 01:21:17 PAGE 4   

              #endif
 179   1        
 180   1      #ifdef TEST_TIMER2
                test_timer2_init();
              #endif
 183   1      
 184   1        while(1);
 185   1      }
 186          
 187          
 188          
 189          
 190          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     57    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
